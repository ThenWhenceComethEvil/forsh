# vim: ft=text: tw=80
#===============================================================================
#                                   THINKIES
#-------------------------------------------------------------------------------

Still don't like any solutions. Gotta start from real basics.

MEMORY can contain (so far)
   - function names
   - addresses in memory to function names
   - parameters to functions (e.g., BRANCH)

Things I know:
   (1)   Function addresses always point directly to function names.

         Given an address, can always call the function at `MEMORY[MEMORY[SP]]`.
         AKA, the function at the index of the address at the stack pointer.
         [
            function       0
            parameter      1
            address(0)     2        <-- SP=2, MEMORY[SP]=0,
         ]                                    MEMORY[MEMORY[SP]]=function

   (2)   Only DOCOL (and >R) push to the stack
   (3)   Only EXIT (and R>) pop from the stack

         Not using the top of the call stack as the SP may be the answer.

         The SP is the current function that will be executed. DOCOL pushes the
         next index to the call stack, and calls NEXT:
                           CS+=( $((SP += _DEFS)) )
                           NEXT

         
         Next does...
            1. set stack pointer to the addr at the current M[SP]
            2. incr the top of the CS
            3. call $SP
                           SP=${M[ CS[-1]++ ]}
                           ${M[SP]}

         Or on one line
                           ${M[ SP=M[CS[-1]++] ]}


'splorin', does this work

MEMORY = [  EXIT        0
         ,  PLUS        1
         ,  DUP         2
         ,  BRANCH      3
         ,  INTERPRET   4
         ,  DOCOL       5        <-- double
         ,  2           6
         ,  1           7
         ,  0           8
         ,  DOCOL       9        <-- quit
         ,  4           10
         ,  3           11
         ,  -2          12
         ]


Program loop, running 'DOUBLE'
   SP = 9 ; M[SP]

   DOCOL (quit)         SP = 10,  CS { 10 }
   NEXT                 SP = 4,   CS { 11 }
   INTERPRET
   KEY -> WORD
   "user types DOUBLE"
   FIND                 SP = 5,   CS { 11 }
   M[SP]
   DOCOL (double)       SP = 6,   CS { 11, 6 }
   NEXT                 SP = 2,   CS { 11, 7 }
   DUP  ; NEXT          SP = 1,   CS { 11, 8 }
   PLUS ; NEXT          SP = 0,   CS { 11, 9 }
   EXIT                 SP = 0,   CS { 11    }
    calls NEXT          SP = 3,   CS { 12    }
   BRANCH
    updates CS          SP = 3,   CS { 10    }
    calls NEXT

Back where we started 17k

I think this works.

--- 

It does work! Woo!

---


What words will be useful?

(NOTE: user words should have no final stack result, and should not modify the
       initial stack item(s))

List functions
   - MAP
   - LEN

String functions
   - EQUAL?          <-- different functions for string equality and numeric?
   - UPPER?              maybe call this one 'MATCH' or something
   - LOWER?
   - HEX?
   - INTEGER?

Path functions
   - EXISTS?
   - CAN?
      - READ CAN? WRITE CAN?
      - : READABLE? READ CAN? ;
      - : WRITABLE? WRITE CAN? ;
   - IS?
      - DIR IS? LINK IS?
      - : IS_DIR? DIR IS? ;

(Wonder if I want the IS? and CAN? functions to be their own words. No IS?, just
 IS_DIR? and IS_FILE? independently.)

Integer functions
   - <= < >= > != ==
   - !0 =0 >0 <0

Boolean/logical functions
   - TRUE
   - TRUE?
   - FALSE
   - FALSE?
   - AND OR NOT

General words
   - Anonymous functions through '['
      - Don't yet know how these actually work
   - Strings
   - Variables
      - Arrays
      - Maps
