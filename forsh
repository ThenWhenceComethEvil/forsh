#!/bin/bash
#-------------------------------------------------------------------------------
# FORTH in bash ... why do I do these things to myself.
#-------------------------------------------------------------------------------
#set -e
# ^-- unfortunately this requires all arithmetic tests to have a `, 1` at the
# end, or evaluating to 0 immediately exits. Would rather have better control
# over when & how to exit, but it adds a lot of overhead. Extra function call
# everywhere to check stack size.

#===============================================================================
#                                   globals
#-------------------------------------------------------------------------------
declare -gA  CACHE=()         # { word  -> index }
declare -gA  RCACHE=()        # { index -> word  } Useful when debugging to print
                              #                    the name occurring at an index
declare -gA  PREV_DEFS=()     # { index -> index } word's index to the index of
                              #                    its past definition.

declare -g   _LINE=''         # String from `read` before split into chars
declare -g   BUFFER=''        # Where the text of WORD is read into
declare -gi  KEY_INDEX=0      # Position in the KEY_BUFFER
declare -ga  KEY_BUFFER=()    # Array of single characters from user input

declare -ga  S=()             # Parameter stack. Values.
declare -ga  CS=()            # Call stack, points to MEMORY locations
declare -gi  SP=0             # Stack pointer
declare -ga  M=( :: )         # Word dictionary. Index of 0 should indicate a
                              # word was unfound. `::` is an invalid command,
                              # and won't do catastrophic shit if executed
                              # accidentally.
declare -gA  V=()             # User-defined variables.
declare -gi  _VAR_NUM=0

declare -g   LATEST=          # Index of most recently defined word
declare -g   LATEST_VAR=      # Name (_VAR_$n) of most recently defined variable

#                                  constants
#-------------------------------------------------------------------------------
# Word offsets.
declare -gi  FLAG_OFFSET=1    # Flag offset
declare -gi  DEFS_OFFSET=2    # Beginning of definition word(s)

# Flag constants
declare -gi  NO_FLAG=0
declare -gi  IMMD_FLAG=1      # Immediate
declare -gi  HIDE_FLAG=2      # Hidden from `FIND`

# State flags
declare -gi  STATE=0
declare -gi  EXECUTE_STATE=0
declare -gi  COMPILE_STATE=1

#                                  debugging
#-------------------------------------------------------------------------------
function debug_stack {
   printf 'STACK {\n'
   for s in "${S[@]}" ; do
      printf '|  %q\n'  "$s"
   done
   printf '}\n\n'
}


function debug_call_stack {
   tput bold
   printf 'CS'
   tput sgr0

   tput setaf 4
   printf '%10s   %s%25s\n'  'addr'  'value'  'dict word'
   tput sgr0

   for (( i=${#CS[@]}-1 ; i>=0 ; --i )) ; do
      _i="${CS[i]}"
      printf '|%7s%4d   %-21s%s\n'  ''  "$_i"  "${M[_i]}"  "${RCACHE[${M[_i]}]}"
   done

   printf '\n'
}


function debug_memory {
   tput bold
   printf 'MEMORY  '
   tput sgr0

   tput setaf 4
   printf '%4s %7s %24s\n'  'idx'  'value'  'dict word'
   tput sgr0

   for idx in "${!M[@]}" ; do
      value="${M[idx]}"
      word="${RCACHE[$idx]}"
      printf '|%7s%4d.  %-20s %s\n'  ''  "$idx"  "$value"  "$word"
   done

   printf '\n'
}


function debug_cache {
   printf 'CACHE {\n'
   {  for i in "${!CACHE[@]}" ; do
         printf '|  %4d  <-  %s\n'  "${CACHE[$i]}"  "$i"
      done
   } | sort -n
   printf '}\n\n'
}


function debug_vars {
   printf 'VARS {\n'
   {  for i in "${!V[@]}" ; do
         printf '|  %s\t%s\n'  "$i"  "${V[$i]}"
      done
   } | column -t
   printf '}\n\n'
}

#
#-------------------------------------------------------------------------------
function def_code {
   LATEST="${#M[@]}"

   local name="$1" ; shift
   local flag="$1" ; shift
   local func="$1" ; shift
   M+=( "$func"  "$flag"  "$@" )

   # Tracks previous definitions for the same word. If the word 'DOUBLE' is
   # already defined at M[10], and now at M[20], PREV_DEFS looks like:
   # { 20 -> 10,  10 -> '' }.
   # 
   # Allows for searching past definitions when a later one is marked as HIDDEN.
   # Follow the links back to
   #  (1)   an empty string
   #  (2)   a non-hidden word
   #
   PREV_DEFS["$LATEST"]="${CACHE[$name]}"
   CACHE[$name]="$LATEST"
   RCACHE["$LATEST"]="$name"
}


function def_word {
   local name="$1" ; shift
   local flag="$1" ; shift
   def_code  "$name"  "$flag"  'DOCOL'  "$@"
}


function assert_stack {
   if (( ${#S[@]} < $1 )) ; then
      printf 'Stack underflow, expected %d parameter(s).\n'  "$1"
      exit 1
   fi
}


function assert_state {
   if [[ ! "$STATE" == "$1" ]] ; then
      printf 'State error, may only be done in: %s.\n'  "$1"
      exit 2
   fi
}


function NEXT {
   ${M[ SP=M[CS[-1]++] ]}
}


function DOCOL {
   CS+=( $((SP += DEFS_OFFSET)) )
   NEXT
}


function code_EXIT {
   unset 'CS[-1]'
   NEXT
}
def_code  EXIT  $NO_FLAG  code_EXIT


#                               forth primitives
#-------------------------------------------------------------------------------
function code_BYE { exit 0 ;}
def_code  BYE  $NO_FLAG  code_BYE


function code_DROP {
   assert_stack 1
   unset 'S[-1]'
   NEXT
}
def_code  DROP  $NO_FLAG  code_DROP


function code_SWAP {
   assert_stack 2
   S+=( "${S[-2]}" )
   unset 'S[-3]'
   NEXT
}
def_code  SWAP  $NO_FLAG  code_SWAP


function code_DUP {
   assert_stack 1
   S+=( "${S[-1]}" )
   NEXT
}
def_code  DUP  $NO_FLAG  code_DUP


function code_OVER {
   assert_stack 2
   S+=( "${S[-2]}" )
   NEXT
}
def_code  OVER  $NO_FLAG  code_OVER


function code_ROT {
   assert_stack 3
   _a="${S[-1]}"
   _b="${S[-2]}"
   _c="${S[-3]}"
   unset 'S[-1]' 'S[-2]' 'S[-3]'
   S+=( "$_c"  "$_a"  "$_b" )
   NEXT
}
def_code  ROT  $NO_FLAG  code_ROT


function code_NROT {
   assert_stack 3
   _a="${S[-1]}"
   _b="${S[-2]}"
   _c="${S[-3]}"
   unset 'S[-3]' 'S[-2]' 'S[-1]'
   S+=( "$_b"  "$_c"  "$_a" )
   NEXT
}
def_code  '-ROT'  $NO_FLAG  code_NROT


function code_2DROP {
   assert_stack 2
   unset 'S[-2]' 'S[-1]'
   NEXT
}
def_code  2DROP  $NO_FLAG  code_2DROP


function code_2DUP {
   assert_stack 2
   S+=( "${S[-2]}"  "${S[-1]}" )
   NEXT
}
def_code  2DUP  $NO_FLAG  code_2DUP


function code_2SWAP {
   assert_stack 4
   S+=( "${S[-4]}"  "${S[-3]}" )
   unset 'S[-6]' 'S[-5]'
   NEXT
}
def_code  2SWAP  $NO_FLAG  code_2SWAP


function code_ques_DUP {
   assert_stack 1
   if (( S[-1] )) ; then
      S+=( "${S[-1]}" )
   fi
   NEXT
}
def_code  ?DUP  $NO_FLAG  code_ques_DUP


function code_INCR {
   assert_stack 1
   (( ++S[-1] ))
   NEXT
}
def_code  '++'  $NO_FLAG  code_INCR


function code_DECR {
   assert_stack 1
   (( --S[-1] ))
   NEXT
}
def_code  '--'  $NO_FLAG  code_DECR


function code_ADD {
   assert_stack 2
   (( S[-2] += S[-1] ))
   unset 'S[-1]'
   NEXT
}
def_code  '+'  $NO_FLAG  code_ADD


function code_SUB {
   assert_stack 2
   (( S[-2] -= S[-1] ))
   unset 'S[-1]'
   NEXT
}
def_code  '-'  $NO_FLAG  code_SUB


function code_MUL {
   assert_stack 2
   (( S[-2] *= S[-1] ))
   unset 'S[-1]'
   NEXT
}
def_code  '*'  $NO_FLAG  code_MUL


function code_DIV {
   assert_stack 2
   (( S[-2] /= S[-1] ))
   unset 'S[-1]'
   NEXT
}
def_code  '/'  $NO_FLAG  code_DIV


function code_EQ {
   assert_stack 2
   (( S[-2] = (S[-2] == S[-1]) ))
   unset 'S[-1]'
   NEXT
}
def_code  '='  $NO_FLAG  code_EQ


function code_NE {
   assert_stack 2
   (( S[-2] = (S[-2] != S[-1]) ))
   unset 'S[-1]'
   NEXT
}
def_code  '!='  $NO_FLAG  code_NE


function code_LT {
   assert_stack 2
   (( S[-2] = (S[-2] < S[-1]) ))
   unset 'S[-1]'
   NEXT
}
def_code  '<'  $NO_FLAG  code_LT


function code_GT {
   assert_stack 2
   (( S[-2] = (S[-2] > S[-1]) ))
   unset 'S[-1]'
   NEXT
}
def_code  '>'  $NO_FLAG  code_GT


function code_LE {
   assert_stack 2
   (( S[-2] = (S[-2] <= S[-1]) ))
   unset 'S[-1]'
   NEXT
}
def_code  '<='  $NO_FLAG  code_LE


function code_GE {
   assert_stack 2
   (( S[-2] = (S[-2] >= S[-1]) ))
   unset 'S[-1]'
   NEXT
}
def_code  '>='  $NO_FLAG  code_GE


function code_ZEQ {
   assert_stack 1
   (( S[-1] = (S[-1] == 0) ))
   NEXT
}
def_code  '0='  $NO_FLAG  code_ZEQ


function code_ZNE {
   assert_stack 1
   (( S[-1] = (S[-1] != 0) ))
   NEXT
}
def_code  '0!'  $NO_FLAG  code_ZNE


function code_ZLT {
   assert_stack 1
   (( S[-1] = (S[-1] < 0) ))
   NEXT
}
def_code  '0<'  $NO_FLAG  code_ZLT


function code_ZGT {
   assert_stack 1
   (( S[-1] = (S[-1] > 0) ))
   NEXT
}
def_code  '0>'  $NO_FLAG  code_ZGT


function code_ZLE {
   assert_stack 1
   (( S[-1] = (S[-1] <= 0) ))
   NEXT
}
def_code  '0<='  $NO_FLAG  code_ZLE


function code_ZGE {
   assert_stack 1
   (( S[-1] = (S[-1] >= 0) ))
   unset 'S[-1]'
   NEXT
}
def_code  '0>='  $NO_FLAG  code_ZGE

#                              bitwise operators
#-------------------------------------------------------------------------------
function code_BIT_AND {
   assert_stack 2
   (( S[-1] &= S[-2] ))
   unset 'S[-2]'
   NEXT
}
def_code  '&'  $NO_FLAG  code_BIT_AND


function code_BIT_OR {
   assert_stack 2
    (( S[-1] |= S[-2] ))
   unset 'S[-2]'
   NEXT
}
def_code  '|'  $NO_FLAG  code_BIT_OR


function code_BIT_XOR {
   assert_stack 2
   (( S[-1] ^= S[-2] ))
   unset 'S[-2]'
   NEXT
}
def_code  '^'  $NO_FLAG  code_BIT_XOR


# TODO: `!` being the 'store' operator means can't use for bitwise not. Need
#       bit and logical comparisons.
function code_NOT {
   assert_stack 2
   (( S[-1] = !S[-1] ))
   NEXT
}
def_code  NOT  $NO_FLAG  code_NOT

#                              memory management
#-------------------------------------------------------------------------------
# This does more in real FORTH, in which it pushes the header (link, name len,
# name, and padding to 4-byte boundry), and sets LATEST & HERE.
#
# The latter variable is unnecessary. No need to point to final index in memory.
# Can easily push to end of M[] or S[].
#
# Likewise, there is no header here. First element is the interpreter function.
#
# This...
#  1. Sets $LATEST to top of the stack
#  2. Creates CACHE entry of $1 -> $LATEST
#
function code_CREATE {
   assert_stack 1
   def_word  "${S[-1]}"  "$NO_FLAG"
   unset 'S[-1]'
   NEXT
}
def_code  CREATE  $NO_FLAG  code_CREATE


function code_CREATE_VAR {
   assert_stack 1
   LATEST_VAR="_VAR_$(( ++_VAR_NUM ))"
   V[${S[-1]}]="$LATEST_VAR"
   unset 'S[-1]'
   NEXT
}
def_code  'CREATE-VAR'  $NO_FLAG  code_CREATE_VAR


# Unsure how this translates right now. Just pushes int to memory?
function code_COMMA {
   assert_stack 1
   M+=( "${S[-1]}" )
   unset 'S[-1]'
   NEXT
}
def_code  ','  $NO_FLAG  code_COMMA

#                                 return stack
#-------------------------------------------------------------------------------
function code_TO_R {
   assert_stack 1
   CS+=( "${S[-1]}" )
   unset 'S[-1]'
   NEXT
}
def_code  '>R'  $NO_FLAG  code_TO_R


function code_FROM_R {
   assert_stack 1
   S+=( "${CS[-1]}" )
   unset 'CS[-1]'
   NEXT
}
def_code  'R>'  $NO_FLAG  code_FROM_R


function code_R_DROP {
   assert_stack 1
   unset 'CS[-1]'
   NEXT
}
def_code  'RDROP'  $NO_FLAG  code_R_DROP

##                                  variables
##-------------------------------------------------------------------------------
function code_STATE {
   S+=( "$STATE" )
   NEXT
}
def_code  'STATE'  $NO_FLAG  code_STATE


function code_LATEST {
   S+=( "$LATEST" )
   NEXT
}
def_code  'LATEST'  $NO_FLAG  code_LATEST


function code_LATEST_VAR {
   S+=( "$LATEST_VAR" )
   NEXT
}
def_code  'LATEST-VAR'  $NO_FLAG  code_LATEST_VAR


function code_STORE {
   assert_stack 2

   local -n __ref__="${S[-1]}"
   local value="${S[-2]}"
   __ref__="$value"

   unset 'S[-2]' 'S[-1]'
   NEXT
}
def_code  '<-'  $NO_FLAG  code_STORE


function code_FETCH {
   assert_stack 1
   local -n __ref__="${S[-1]}"
   unset 'S[-1]'
   S+=( "${__ref__}" )
   NEXT
}
def_code  '->'  $NO_FLAG  code_FETCH


function code_ADDSTORE {
   assert_stack 2
   local -n __ref__="${S[-1]}"
   (( __ref__ += S[-2] ))
   unset 'S[-2]' 'S[-1]'
   NEXT
}
def_code  '+<-'  $NO_FLAG  code_ADDSTORE


function code_SUBSTORE {
   assert_stack 2
   local -n __ref__="${S[-1]}"
   (( __ref__ -= S[-2] ))
   unset 'S[-2]' 'S[-1]'
   NEXT
}
def_code  '-<-'  $NO_FLAG  code_SUBSTORE


function code_DECSTORE {
   assert_stack 1
   local -n __ref__="${S[-1]}"
   (( -- __ref__ ))
   unset 'S[-1]'
   NEXT
}
def_code  '--<-'  $NO_FLAG  code_DECSTORE


function code_INCSTORE {
   assert_stack 1
   local -n __ref__="${S[-1]}"
   (( ++ __ref__ ))
   unset 'S[-1]'
   NEXT
}
def_code  '++<-'  $NO_FLAG  code_INCSTORE

#                                     I/O
#-------------------------------------------------------------------------------
function code_dot {
   assert_stack 1
   printf '%s\n'  "${S[-1]}"
   unset 'S[-1]'
   NEXT
}
def_code  '.'  $NO_FLAG  code_dot


function code_dot_s { debug_stack  ; NEXT ;}
def_code  '.s'  $NO_FLAG  code_dot_s

function code_dot_m { debug_memory ; NEXT ;}
def_code  '.m'  $NO_FLAG  code_dot_m

function code_dot_c { debug_cache  ; NEXT ;}
def_code  '.c'  $NO_FLAG  code_dot_c

function code_dot_v { debug_vars   ; NEXT ;}
def_code  '.v'  $NO_FLAG  code_dot_v


function code_dot_cache {
   assert_stack 1
   printf '%s\n'  "${CACHE[${S[-1]}]}"
   unset 'S[-1]'
   NEXT
}
def_code  '.cache'  $NO_FLAG  code_dot_cache


function code_dot_rcache {
   assert_stack 1
   printf '%s\n'  "${RCACHE[${S[-1]}]}"
   unset 'S[-1]'
   NEXT
}
def_code  '.rcache'  $NO_FLAG  code_dot_rcache


function code_EMIT {
   assert_stack 1
   printf '%s'  "${S[-1]}"
   unset 'S[-1]'
   NEXT
}
def_code  EMIT  $NO_FLAG  code_EMIT


# KEY()
# @description
#  Reads 1 character of stdin. Pushes the character to the stack. For
#  ergonomics, some silliness:
#
#  First reads a full line from stdin into temp var ${_LINE}. Next reads from
#  this string to split into individual characters, pushes to KEY_BUFFER[].
#
#  `KEY` returns each successive char from KEY_BUFFER[], until exhausted, then
#  reads another line.
#
function code_KEY {
   if (( KEY_INDEX == ${#KEY_BUFFER[@]} )) ; then
      KEY_BUFFER=() ; KEY_INDEX=0

      read -er _LINE || exit 0
      while read -N1 -r _char ; do
         KEY_BUFFER+=( "$_char" )
      done <<< "$_LINE"
   fi

   S+=( "${KEY_BUFFER[KEY_INDEX++]}" )
   if [[ ! $1 ]] ; then
      NEXT
   fi
}
def_code  KEY  $NO_FLAG  code_KEY


function code_WORD {
   BUFFER=''

   while :; do
      code_KEY 'no_next'
      if [[ ! "${S[-1]}" =~ [[:space:]] ]] ; then
         break
      else
         unset 'S[-1]'
      fi
   done

   while :; do
      if [[ ! "${S[-1]}" =~ [[:space:]] ]] ; then
         BUFFER+="${S[-1]}"
         unset 'S[-1]'
      else
         break
      fi
      code_KEY 'no_next'
   done
   unset 'S[-1]'  #<-- whitespace after word

   S+=( "$BUFFER" )
   if [[ ! $1 ]] ; then
      NEXT
   fi
}
def_code  'WORD'  $NO_FLAG  code_WORD


# TODO: `LIT` is broken. Need to see what's up.
function code_LIT {
   S+=( "${M[CS[-1]++]}" )
   NEXT
}
def_code  'LIT'  $NO_FLAG  code_LIT


function code_NUMBER {
   if [[ "${S[-1]}" =~ ^(\-?[[:digit:]]+[[:digit:]_]*)$ ]] ; then
      unset 'S[-1]'
      S+=( "${BASH_REMATCH[1]//_}"  1 )
   else
      S+=( 0 )
   fi

   if [[ ! $1 ]] ; then
      NEXT
   fi
}
def_code  'NUMBER'  $NO_FLAG  code_NUMBER


function code_FIND {
   _addr=${CACHE[${S[-1]}]}
   unset 'S[-1]'

   # Some trickery here. Assigning `_addr` to itself sets to `0' if unset. Don't
   # need early return above this, or explicitly setting to `0' if unfound.
   while ((
      _addr = _addr ,
      _hide = M[_addr + FLAG_OFFSET] & HIDE_FLAG
   )) ; do 
      _addr=${PREV_DEFS[$_addr]}
   done

   S+=( "$_addr" )
   if [[ ! $1 ]] ; then
      NEXT
   fi
}
def_code  'FIND'  $NO_FLAG  code_FIND


function code_BRANCH {
   (( CS[-1] += M[CS[-1]] ))
   NEXT
}
def_code  'BRANCH'  $NO_FLAG  code_BRANCH

#                              interpreter words
#-------------------------------------------------------------------------------
function _exe_word {
   SP=${S[-1]}
   unset 'S[-1]'
   ${M[SP]}
}

function _push_number {
   S[-1]="${_word}"
   code_NUMBER 'no_next'

   # Not a number, it's a terrible failure.
   if (( ! S[-1] )) ; then
      printf "no: ${BUFFER}\n"  1>&2
      exit 1
   fi

   unset 'S[-1]'  # pop the `true` flag
   NEXT
}
 
function code_INTERPRET {
   code_WORD 'no_next' ; local _word="${S[-1]}"
   code_FIND 'no_next' 

   if (( S[-1] )) ; then
      # It's a word.
      _exe_word "$_word"
   else
      # Not a word, it's a number?
      _push_number
   fi

   ## TODO:
   # Gotta think through.
   #  Either have something that resolves to an SP, or a literal number.
   #  Result is either
   #     executed (if SP)                 EXECUTE
   #     pushed to stack (if literal)     EXECUTE
   #     pushed to memory (both cases)    COMPILE
   #
   #  Order is...
   #     Is word in dict?
   #        Y: is IMMEDIATE?
   #              Y: _exe_word()
   #              N: is COMPILE_STATE?
   #                    Y: append to current dictionary def (_COMMA)
   #                    N: _exe_word()
   #        N: 
   #
   # Execute words when:
   #     (( IMMD_FLAG || EXECUTE_STATE ))
   #
   # Push numbers to stack when:
   #     EXECUTE_STATE
   #
   # Push numbers to memory when:
   #     COMPILE_STATE
   #
   # Finally push words to stack.
   #
   #
   # If 

   case $STATE in
      $EXECUTE_STATE) ;;
      $COMPILE_STATE) ;;
   esac
}
def_code  INTERPRET  $NO_FLAG  code_INTERPRET


function code_RBRAC {
   (( STATE = EXECUTE_STATE ))
   NEXT
}
def_code  '['  $NO_FLAG  code_RBRAC


function code_LBRAC {
   (( STATE = COMPILE_STATE ))
   NEXT
}
def_code  ']'  $IMMD_FLAG  code_LBRAC
 
 
# Toggle HIDDEN flag on word.
function code_HIDDEN {
   assert_stack 1
   ((
      _addr = S[-1] + FLAG_OFFSET ,
      M[_addr] ^= HIDE_FLAG
   ))
   unset 'S[-1]'
   NEXT
}
def_code  'HIDDEN'  $NO_FLAG  code_HIDDEN


function code_IMMEDIATE {
   (( M[LATEST + FLAG_OFFSET] ^= IMMD_FLAG ))
   NEXT
}
def_code  'IMMEDIATE'  $IMMD_FLAG  code_IMMEDIATE


word_COLON=(
   ${CACHE[WORD]}
   ${CACHE[CREATE]}
   ${CACHE[LATEST]}
   ${CACHE[HIDDEN]}
   ${CACHE[']']}
   ${CACHE[EXIT]}
)
def_word  ':'  $NO_FLAG  "${word_COLON[@]}"


word_SEMI=(
   ${CACHE[LIT]}
   ${CACHE[EXIT]}
   ${CACHE[","]}
   ${CACHE[LATEST]}
   ${CACHE[HIDDEN]}
   ${CACHE[']']}
   ${CACHE[EXIT]}
)
def_word  ';'  $NO_FLAG  "${word_SEMI[@]}"


word_HIDE=(
   ${CACHE[WORD]}
   ${CACHE[FIND]}
   ${CACHE[HIDDEN]}
   ${CACHE[EXIT]}
)
def_word  'HIDE'  $NO_FLAG  "${word_HIDE[@]}"


word_TICK=(
   ${CACHE[WORD]}
   ${CACHE[FIND]}
   ${CACHE[EXIT]}
)
def_word  "'"  $NO_FLAG  "${word_TICK[@]}"


word_VARIABLE=(
   ${CACHE[WORD]}
   ${CACHE[DUP]}
   ${CACHE[CREATE-VAR]}
   ${CACHE[CREATE]}

   # Push `LIT` to M[].
   ${CACHE[LIT]}
   ${CACHE[LIT]}
   ${CACHE[","]}

   # Push _VAR_$n to M[].
   ${CACHE[LATEST-VAR]}
   ${CACHE[","]}

   # Push `EXIT` to M[].
   ${CACHE[LIT]}
   ${CACHE[EXIT]}
   ${CACHE[","]}

   ${CACHE[EXIT]}
)
def_word  'VARIABLE'  $NO_FLAG  "${word_VARIABLE[@]}"


word_QUIT=(
   ${CACHE[INTERPRET]}
   ${CACHE[BRANCH]} -2
)
def_word  'QUIT'  $NO_FLAG  "${word_QUIT[@]}"


#                                    engage
#-------------------------------------------------------------------------------
if [[ ! $0 == "${BASH_SOURCE[0]}" ]] ; then
   return
fi

while (( $# )) ; do
   case "$1" in
      -x)   set -x       ;;
      -m)   debug_memory ;;
   esac
   shift
done

SP=${CACHE[QUIT]}
${M[SP]}
